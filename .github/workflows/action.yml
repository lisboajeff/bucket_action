name: Python CLI to Synchronize Certificates

on:
  workflow_call:
    inputs:
      base_path:
        type: string
        description: 'Repository Path'
        required: true
      description:
        type: string
        description: 'Description'
        required: true
      configuration:
        type: string
        description: 'Environment Configuration'
        required: true
      expression_file_paths:
        type: string
        description: 'Expression of files paths : folder:extension,folder_b:extension_b....,folder_n:extension_n'
jobs:
  reusable_workflow_job:
    runs-on: ubuntu-latest
    env:
      BASE_PATH: "${{ inputs.base_path }}"
      DESCRIPTION: "${{ inputs.description }}"
      CONFIGURATION: "${{ inputs.configuration }}"
      EXPRESSION_FILE_PATHS: "${{ inputs.expression_file_paths }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load Environment Configurations
        run: |
          
          ENV_FILE=${{ env.CONFIGURATION }}
          
          if [ ! -f "$ENV_FILE" ]; then
              echo "File .env not found: $ENV_FILE"
              exit 1
          fi
          
          while IFS= read -r line || [[ -n "$line" ]]; do
              if [[ $line = \#* ]] || [ -z "$line" ]; then
                  continue
              fi
              echo "$line"
              echo "$line" >> "$GITHUB_ENV"
          done <"$ENV_FILE"

      - name: Verify Directory Structure and Configuration File
        run: |
          
          if [ ! -d "${{ env.BASE_PATH }}" ]; then
            echo "Error: ${{ env.BASE_PATH }} directory not found." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          regex='^([a-zA-Z0-9_]+:[a-zA-Z0-9_]+)(,[a-zA-Z0-9_]+:[a-zA-Z0-9_]+)*$'

          if [[ ! $EXPRESSION_FILE_PATHS =~ $regex ]]; then
            echo "Cadeia inválida!"
            exit 1
          fi
          
          IFS=',' read -ra PAIRS <<< "$input"
          
          echo "Verifier $EXPRESSION_FILE_PATHS"
          
          for pair in "${PAIRS[@]}"; do
          
            folder="${pair%%:*}"
          
            extension="${pair##*:}"
          
            echo "folder=$folder extension=$extension"
          
            if [ ! -d "${{ env.BASE_PATH }}/$folder" ]; then
              echo "Error: ${{ env.BASE_PATH }}/$folder directory not found." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            if ls ${{ env.BASE_PATH }}/$folder/*.txt 1> /dev/null 2>&1; then
              echo "Existe pelo menos um arquivo .txt"
            else
              echo "Não existem arquivos .txt na pasta ${{ env.BASE_PATH }}/$folder"
              exit 1
            fi

          done

          echo "All directory structure checks have passed successfully."

      - name: Verify variables in config.env
        env:
          REQUIRED_VARS: "AWS_REGION BUCKET_NAME"
        run: |
          IFS=' ' read -r -a REQUIRED_VARS_ARRAY <<< "$REQUIRED_VARS"
          MISSING_VARS=()
          for VAR in "${REQUIRED_VARS_ARRAY[@]}"; do
            if ! grep -qE "^${VAR}=" ${{ env.CONFIGURATION }}; then
              MISSING_VARS+=("$VAR")
            fi
          done  
          if [ ${#MISSING_VARS[@]} -ne 0 ]; then
            echo "Error: The following variables are missing in config.env: ${MISSING_VARS[*]}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "All necessary variables are defined in config.env."

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Clone public repository
        run: git clone https://github.com/lisboajeff/bucket_python.git

      - name: Install Requirements
        run: pip install -r bucket_python/requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: python bucket_python/src/main.py "${{ env.EXPRESSION_FILE_PATHS }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Publish Report to Job Summary
        run: |
          echo "### S3 Sync Report" >> $GITHUB_STEP_SUMMARY
          cat s3_sync_report.md >> $GITHUB_STEP_SUMMARY