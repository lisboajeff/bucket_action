name: Python CLI to Synchronize Certificates


on:
  workflow_call:
    inputs:
      base_path:
        type: string
        description: 'Repository Path'
        required: true
      description:
        type: string
        description: 'Description'
        required: true
      configuration:
        type: string
        description: 'Environment Configuration'
        required: true
      directory_properties:
        type: string
        description: 'Directory Properties'
      type:
        type: string
        description: 'Type Of Synchronizer Planning or Apply'

jobs:
  reusable_workflow_job:
    runs-on: ubuntu-latest
    env:
      BASE_PATH: "${{ inputs.base_path }}"
      DESCRIPTION: "${{ inputs.description }}"
      CONFIGURATION: "${{ inputs.configuration }}"
      DIRECTORY_PROPERTIES: "${{ inputs.directory_properties }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load Environment Configurations
        run: |
          
          if [ ! -f "${{ env.DIRECTORY_PROPERTIES }}" ]; then
            echo "File .properties not found: ${{ env.DIRECTORY_PROPERTIES }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          ENV_FILE=${{ env.CONFIGURATION }}
          
          if [ ! -f "$ENV_FILE" ]; then
             echo "File .env not found: $ENV_FILE" >> $GITHUB_STEP_SUMMARY
             exit 1
          fi
          
          while IFS= read -r line || [[ -n "$line" ]]; do
             if [[ $line = \#* ]] || [ -z "$line" ]; then
                 continue
             fi
             echo "$line"
             echo "$line" >> "$GITHUB_ENV"
          done <"$ENV_FILE"

      - name: Verify Directory Structure and Configuration File
        run: |
          
          if [ ! -d "${{ env.BASE_PATH }}" ]; then
            echo "Error: ${{ env.BASE_PATH }} directory not found." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          while IFS= read -r line || [[ -n "$line" ]]; do
          
            if [[ $line = \#* ]] || [ -z "$line" ]; then
                continue
            fi

            echo "$line"
          
            LINE_REGEX='^([a-zA-Z0-9_]+=[a-zA-Z0-9_]+)(,[a-zA-Z0-9_]+=[a-zA-Z0-9_]+)*$'
          
            if ! [[ "$line" =~ $LINE_REGEX ]]; then
              echo -e "The line: $line\n on file: $DIRECTORY_PROPERTIES\nDoes not match the expected format." >> $GITHUB_STEP_SUMMARY
              echo "## Expected Format" >> $GITHUB_STEP_SUMMARY
              echo -e "folder=extension\nfolder_b=extension_b\n.\n.\n.\nfolder_n=extension_n" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          
            folder="$(echo $line | cut -d '=' -f 1)"
          
            if [ ! -d "${{ env.BASE_PATH }}/$folder" ]; then
              echo "Error: ${{ env.BASE_PATH }}/$folder directory not found." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          
          done < "$DIRECTORY_PROPERTIES"

          output=$(awk -F'\n' 'BEGIN { RS = ""; OFS="," } { $1=$1; print }' $DIRECTORY_PROPERTIES)

          echo "output is : $output"
          
          echo "EXPRESSION_FILE_PATHS=$output" >> "$GITHUB_ENV"

      - name: Verify variables in config.env
        env:
          REQUIRED_VARS: "AWS_REGION BUCKET_NAME VIRTUAL_PATH"
        run: |
          IFS=' ' read -r -a REQUIRED_VARS_ARRAY <<< "$REQUIRED_VARS"
          MISSING_VARS=()
          for VAR in "${REQUIRED_VARS_ARRAY[@]}"; do
            if ! grep -qE "^${VAR}=" ${{ env.CONFIGURATION }}; then
              MISSING_VARS+=("$VAR")
            fi
          done  
          if [ ${#MISSING_VARS[@]} -ne 0 ]; then
            echo "Error: The following variables are missing in config.env: ${MISSING_VARS[*]}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "All necessary variables are defined in config.env."

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Clone public repository
        run: git clone https://github.com/lisboajeff/bucket_python.git

      - name: Install Requirements
        run: pip install -r bucket_python/requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync files to S3
        run: |
          python bucket_python/src/main.py "${{ inputs.type }}" "${{ env.EXPRESSION_FILE_PATHS }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Publish Report to Job Summary
        run: |
          echo "### S3 Sync Report" >> $GITHUB_STEP_SUMMARY
          cat s3_sync_report.md >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const issue_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = fs.readFileSync('s3_sync_report.md', 'utf8');
            console.log("Body content:", body);  // Debug: Print the body content
            if (body.trim() === '') {
              console.log('The body content is empty.');
            } else {
              github.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
            }